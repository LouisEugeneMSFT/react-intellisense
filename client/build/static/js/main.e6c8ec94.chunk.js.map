{"version":3,"sources":["demo/components/VariablesList.tsx","intellisense/components/CompletionElement.tsx","intellisense/components/CompletionList.tsx","intellisense/utils/uiUtils.ts","intellisense/components/IntellisenseTextField.tsx","intellisense/hooks/useLanguageServer.ts","intellisense/utils/lspMessagesUtils.ts","monaco/components/MonacoEditor.tsx","monaco/utils/socketsUtils.ts","monaco/utils/monacoUtils.ts","demo/components/App.tsx","serviceWorker.ts","index.tsx"],"names":["VariablesList","React","textFieldValue","setTextFieldValue","listValues","setListValues","postList","a","newValues","push","fetch","method","headers","body","JSON","stringify","list","Label","style","display","flexDirection","TextField","value","placeholder","onChange","_e","newValue","onKeyDown","e","keyCode","width","Button","onClick","map","index","key","renderLabelWithCharacterHighlights","matches","match","firstIndex","lastIndex","length","items","indices","m","firstSpan","slice","secondSpan","color","justifyContent","renderMatch","CompletionElement","props","documentation","completionItem","isSelected","onClickCompletionItem","TooltipHost","content","maxWidth","directionalHint","DirectionalHint","rightCenter","height","cursor","padding","alignItems","backgroundColor","kind","icon","CompletionItemKind","Function","FontIcon","iconName","marginRight","Variable","renderIcon","data","label","CompletionList","forwardRef","ref","completionItems","selectedItem","position","top","left","maxHeight","overflowY","overflowX","boxShadow","zIndex","checkIsOutside","x","y","element","getBoundingClientRect","right","bottom","IntellisenseTextField","url","scopes","id","useState","showCompletionList","setShowCompletionList","selectedCompletionItem","setSelectedCompletionItem","cursorPosition","setCursorPosition","didComplete","useRef","mainContainerRef","completionListRef","documentUri","ws","latestMessageId","latestDocumentVersion","setCompletionItems","useEffect","current","W3CWebSocket","onopen","uri","languageId","version","send","jsonrpc","params","clientInfo","name","rootUri","capabilities","workspaceFolders","processId","initializationOptions","getInitializeMessage","textDocument","text","onmessage","messageText","handleMessage","readyState","WebSocket","OPEN","settings","getConfigurationChangedMessage","updateBackendMemory","getCompletionItems","message","parse","result","contentChanges","line","character","useLanguageServer","outsideClickHandler","event","keyupHandler","document","addEventListener","removeEventListener","onValueChanged","setValueToSelectedCompletionItem","selectedSuggestion","insertText","range","substr","start","end","onKeyUp","preventDefault","target","selectionStart","suggestionIndex","options","quickSuggestions","wordBasedSuggestions","MonacoEditor","editor","setEditor","window","monacoServiceInstance","MonacoServices","install","webSocket","socketOptions","constructor","maxReconnectionDelay","minReconnectionDelay","reconnectionDelayGrowFactor","connectionTimeout","maxRetries","debug","ReconnectingWebSocket","createWebSocket","listen","onConnection","connection","disposable","documentSelector","MonacoLanguageClient","clientOptions","errorHandler","error","ErrorAction","Continue","closed","CloseAction","DoNotRestart","connectionProvider","get","closeHandler","Promise","resolve","createConnection","createLanguageClient","onClose","dispose","onDidChangeModelContent","getValue","monaco","init","then","instance","languageName","languages","getLanguages","some","lang","register","language","theme","editorDidMount","_getValue","initializeIcons","fieldTypes","protocol","location","hostname","App","fieldType","setFieldType","selectedScopes","setSelectedScopes","isOpen","setIsOpen","openPanel","useConstCallback","dismissPanel","Text","variant","nowrap","block","margin","DefaultButton","Panel","isLightDismiss","onDismiss","closeButtonAriaLabel","headerText","Dropdown","selectedKey","option","marginBottom","scope","Checkbox","checked","includes","newScopes","filter","s","onChangeSelectedScopes","Boolean","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e6c8ec94.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { Button } from 'office-ui-fabric-react/lib/Button';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport * as React from 'react';\r\n\r\nfunction VariablesList() {\r\n  const [textFieldValue, setTextFieldValue] = React.useState('');\r\n  const [listValues, setListValues] = React.useState<string[]>([]);\r\n\r\n  const postList = async () => {\r\n    const newValues = listValues;\r\n\r\n    if (textFieldValue !== '') {\r\n      listValues.push(textFieldValue);\r\n    }\r\n\r\n    await fetch('/setvariables', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ list: newValues }),\r\n    });\r\n\r\n    setListValues(newValues);\r\n    setTextFieldValue('');\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    postList();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Label>Variables:</Label>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n        }}\r\n      >\r\n        <TextField\r\n          value={textFieldValue}\r\n          placeholder={'New variable'}\r\n          onChange={(_e, newValue) => setTextFieldValue(newValue || '')}\r\n          onKeyDown={(e) => {\r\n            if (e.keyCode == 13) {\r\n              postList();\r\n            }\r\n          }}\r\n          style={{\r\n            width: '220px',\r\n          }}\r\n        />\r\n        <Button onClick={() => postList()}>Add</Button>\r\n      </div>\r\n      <ul>\r\n        {listValues.map((value, index) => (\r\n          <li key={index}>{value}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VariablesList;\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CompletionItemKind } from 'monaco-languageclient';\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\nimport {\n  DirectionalHint,\n  TooltipHost,\n} from 'office-ui-fabric-react/lib/Tooltip';\nimport React from 'react';\nimport { CompletionItem, MarkupContent } from 'vscode-languageserver-types';\n\ntype FuseJsMatch = { indices: number[][]; value: string; key: string };\n\nconst renderIcon = (kind: CompletionItemKind | undefined): JSX.Element => {\n  let icon: JSX.Element = <> </>;\n\n  switch (kind) {\n    case CompletionItemKind.Function:\n      icon = <FontIcon iconName=\"Variable\" style={{ marginRight: '5px' }} />;\n      break;\n    case CompletionItemKind.Variable:\n      icon = (\n        <FontIcon iconName=\"VariableGroup\" style={{ marginRight: '5px' }} />\n      );\n      break;\n  }\n\n  return icon;\n};\n\nconst renderLabelWithCharacterHighlights = (\n  matches: FuseJsMatch[]\n): JSX.Element => {\n  const renderMatch = (match: FuseJsMatch): JSX.Element => {\n    let firstIndex = 0;\n    const lastIndex = match.value.length;\n\n    const items = match.indices.map((m) => {\n      const firstSpan = <span>{match.value.slice(firstIndex, m[0])}</span>;\n      const secondSpan = (\n        <span style={{ color: 'blue', justifyContent: 'center' }}>\n          {match.value.slice(m[0], m[1] + 1)}\n        </span>\n      );\n\n      firstIndex = m[1] + 1;\n      return (\n        <>\n          {firstSpan}\n          {secondSpan}\n        </>\n      );\n    });\n\n    items.push(<span>{match.value.slice(firstIndex, lastIndex)}</span>);\n\n    return <>{items}</>;\n  };\n\n  return <> {matches.map((match) => renderMatch(match))} </>;\n};\n\nconst renderDocumentation = (\n  documentation: string | MarkupContent | undefined\n) => {\n  return <span style={{ maxWidth: '200px' }}>{documentation}</span>;\n};\n\nconst CompletionElement = (props: {\n  completionItem: CompletionItem;\n  isSelected: boolean;\n  onClickCompletionItem: () => void;\n}) => {\n  const { completionItem, isSelected, onClickCompletionItem } = props;\n\n  return (\n    <TooltipHost\n      content={renderDocumentation(completionItem.documentation)}\n      directionalHint={DirectionalHint.rightCenter}\n    >\n      <div\n        style={{\n          height: '32px',\n          cursor: 'pointer',\n          padding: '0 4px',\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          backgroundColor: isSelected ? '#ddd' : '',\n        }}\n        onClick={onClickCompletionItem}\n      >\n        {renderIcon(completionItem.kind)}\n        {completionItem.data.matches\n          ? renderLabelWithCharacterHighlights(completionItem.data.matches)\n          : completionItem.label}\n      </div>\n    </TooltipHost>\n  );\n};\n\nexport default CompletionElement;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport CompletionElement from 'intellisense/components/CompletionElement';\nimport React from 'react';\nimport { CompletionItem } from 'vscode-languageserver-types';\n\nconst CompletionList = React.forwardRef<\n  HTMLDivElement,\n  {\n    completionItems: CompletionItem[];\n    selectedItem: number;\n    onClickCompletionItem: (index: number) => void;\n  }\n>((props, ref) => {\n  const { completionItems, selectedItem, onClickCompletionItem } = props;\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        position: 'absolute',\n        top: 32,\n        left: 0,\n        maxHeight: '300px',\n        width: '100%',\n        backgroundColor: 'white',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        boxShadow:\n          '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n        zIndex: 2000,\n      }}\n    >\n      {completionItems.map((completionItem, index) => (\n        <CompletionElement\n          key={index}\n          completionItem={completionItem}\n          isSelected={selectedItem === index}\n          onClickCompletionItem={() => onClickCompletionItem(index)}\n        />\n      ))}\n    </div>\n  );\n});\n\nexport default CompletionList;\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nexport const checkIsOutside = (x: number, y: number, element: HTMLElement) => {\r\n  const { left, top, right, bottom } = element.getBoundingClientRect();\r\n\r\n  return x < left || x > right || y < top || y > bottom;\r\n};\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport CompletionList from 'intellisense/components/CompletionList';\nimport { useLanguageServer } from 'intellisense/hooks/useLanguageServer';\nimport { checkIsOutside } from 'intellisense/utils/uiUtils';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport React from 'react';\n\nfunction IntellisenseTextField(props: {\n  url: string;\n  scopes: string[];\n  id: string;\n  value?: string;\n  onChange: (newValue: string) => void;\n}) {\n  const { url, scopes, id, value, onChange } = props;\n\n  const [textFieldValue, setTextFieldValue] = React.useState('');\n  const [showCompletionList, setShowCompletionList] = React.useState(false);\n  const [selectedCompletionItem, setSelectedCompletionItem] = React.useState(0);\n  const [cursorPosition, setCursorPosition] = React.useState(0);\n\n  const didComplete = React.useRef<boolean>(false);\n  const mainContainerRef = React.useRef<HTMLDivElement>(null);\n  const completionListRef = React.useRef<HTMLDivElement>(null);\n\n  const completionItems = useLanguageServer(\n    url,\n    scopes,\n    id,\n    textFieldValue,\n    cursorPosition\n  );\n\n  // If value is provided then component becomes controlled\n  React.useEffect(() => {\n    if (value && value !== textFieldValue) {\n      setTextFieldValue(value);\n    }\n  }, [value]);\n\n  // Show the completion list again every time the results are different (unless something was just selected from the list)\n  React.useEffect(() => {\n    setSelectedCompletionItem(0);\n\n    if (didComplete.current) {\n      didComplete.current = false;\n    } else {\n      setShowCompletionList(true);\n    }\n  }, [completionItems]);\n\n  // Closes the list of completion items if user clicks away from component or presses \"Escape\"\n  React.useEffect(() => {\n    const outsideClickHandler = (event: MouseEvent) => {\n      const { x, y } = event;\n\n      if (mainContainerRef.current && completionListRef.current) {\n        if (\n          checkIsOutside(x, y, mainContainerRef.current) &&\n          checkIsOutside(x, y, completionListRef.current)\n        ) {\n          setShowCompletionList(false);\n        }\n      }\n    };\n\n    const keyupHandler = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowCompletionList(false);\n      }\n    };\n\n    document.body.addEventListener('click', outsideClickHandler);\n    document.body.addEventListener('keyup', keyupHandler);\n\n    return () => {\n      document.body.removeEventListener('click', outsideClickHandler);\n      document.body.removeEventListener('keyup', keyupHandler);\n    };\n  }, []);\n\n  // When textField value is changed\n  const onValueChanged = (newValue: string) => {\n    setTextFieldValue(newValue);\n\n    onChange(newValue);\n  };\n\n  // Handles selection of completion items and validation through keyboard (Up Down to navigate and Enter to validate)\n  const onKeyUpMainComponent = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    switch (event.key) {\n      case 'ArrowDown':\n        completionItems?.length &&\n          setSelectedCompletionItem(\n            (index) => (index + 1) % completionItems?.length\n          );\n        break;\n      case 'ArrowUp':\n        completionItems?.length &&\n          setSelectedCompletionItem(\n            (index) =>\n              (completionItems?.length + index - 1) % completionItems?.length\n          );\n        break;\n      case 'Enter':\n        setValueToSelectedCompletionItem(selectedCompletionItem);\n        break;\n    }\n  };\n\n  // Handles validation of a suggested completion item when clicking on it\n  const onClickCompletionItem = (suggestionIndex: number) => {\n    setValueToSelectedCompletionItem(suggestionIndex);\n  };\n\n  // Prevents cursor from moving around in textField when going through the list of completion items\n  const onKeyDownTextField = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'ArrowUp':\n        if (completionItems?.length) {\n          event.preventDefault();\n        }\n        break;\n    }\n    // Typing also modifies the cursor position\n    setCursorPosition((event.target as HTMLInputElement).selectionStart || 0);\n  };\n\n  // Updates position of cursor\n  const onClickTextField = (\n    event: React.MouseEvent<HTMLInputElement, MouseEvent>\n  ) => {\n    setCursorPosition((event.target as HTMLInputElement).selectionStart || 0);\n  };\n\n  // Set textField value to completion item value\n  const setValueToSelectedCompletionItem = (index: number) => {\n    if (completionItems.length >= index) {\n      const selectedSuggestion = completionItems[index].insertText || '';\n      const range = completionItems[index].data.range;\n\n      if (range) {\n        const newValue =\n          textFieldValue.substr(0, range.start.character) +\n          selectedSuggestion +\n          textFieldValue.substr(range.end.character);\n        onValueChanged(newValue);\n      } else {\n        onValueChanged(selectedSuggestion);\n      }\n\n      // This makes sure we do not show the completion items after a value is picked from the list\n      didComplete.current = true;\n      setShowCompletionList(false);\n    }\n  };\n\n  return (\n    <div\n      onKeyUp={onKeyUpMainComponent}\n      ref={mainContainerRef}\n      style={{ position: 'relative' }}\n    >\n      <TextField\n        value={textFieldValue}\n        onChange={(_e, newValue) => onValueChanged(newValue || '')}\n        onKeyDown={onKeyDownTextField}\n        onClick={onClickTextField}\n        style={{ width: '300px' }}\n      />\n\n      {showCompletionList && (\n        <CompletionList\n          ref={completionListRef}\n          completionItems={completionItems}\n          selectedItem={selectedCompletionItem}\n          onClickCompletionItem={onClickCompletionItem}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default IntellisenseTextField;\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  getCompletionRequestMessage,\r\n  getConfigurationChangedMessage,\r\n  getDocumentChangedMessage,\r\n  getInitializeMessage,\r\n  getTextDocumentOpenedMessage,\r\n} from 'intellisense/utils/lspMessagesUtils';\r\nimport React from 'react';\r\nimport { CompletionItem } from 'vscode-languageserver-types';\r\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\r\n\r\nconst LANGUAGE_NAME = 'intellisense';\r\n\r\n/**\r\n * A hook that connects to a LSP server. It takes information about a textField (value, position) and returns completion results\r\n * @param url url of the LSP server\r\n * @param scopes scopes are used to filter the type of completion results to show (variables, expressions, etc..)\r\n * @param documentUri a unique identifier for the textField\r\n * @param textFieldValue current value of textField\r\n * @param cursorPosition position of textField cursor\r\n */\r\nexport const useLanguageServer = (\r\n  url: string,\r\n  scopes: string[],\r\n  documentUri: string,\r\n  textFieldValue: string,\r\n  cursorPosition: number\r\n): CompletionItem[] => {\r\n  const ws = React.useRef<W3CWebSocket>();\r\n\r\n  const latestMessageId = React.useRef(0);\r\n  const latestDocumentVersion = React.useRef(0);\r\n\r\n  const [completionItems, setCompletionItems] = React.useState<\r\n    CompletionItem[]\r\n  >([]);\r\n\r\n  // Initialize websocket connection for a specific url\r\n  React.useEffect(() => {\r\n    ws.current = new W3CWebSocket(url);\r\n    ws.current.onopen = () => {\r\n      ws.current.send(JSON.stringify(getInitializeMessage(scopes)));\r\n      ws.current.send(\r\n        JSON.stringify(\r\n          getTextDocumentOpenedMessage(\r\n            documentUri,\r\n            LANGUAGE_NAME,\r\n            latestDocumentVersion.current,\r\n            textFieldValue\r\n          )\r\n        )\r\n      );\r\n    };\r\n    ws.current.onmessage = (messageText) => {\r\n      handleMessage(messageText);\r\n    };\r\n  }, [url]);\r\n\r\n  // If scopes change, update backend with info\r\n  React.useEffect(() => {\r\n    if (ws.current.readyState === WebSocket.OPEN) {\r\n      ws.current.send(JSON.stringify(getConfigurationChangedMessage(scopes)));\r\n    }\r\n  }, [scopes]);\r\n\r\n  // When textField value changes, update backend memory and get latest completion results\r\n  React.useEffect(() => {\r\n    if (ws.current.readyState === WebSocket.OPEN) {\r\n      updateBackendMemory(textFieldValue);\r\n      getCompletionItems();\r\n    }\r\n  }, [textFieldValue]);\r\n\r\n  // Get completion results when selection changes\r\n  React.useEffect(() => {\r\n    if (ws.current.readyState === WebSocket.OPEN) {\r\n      getCompletionItems();\r\n    }\r\n  }, [cursorPosition]);\r\n\r\n  // Handles messages coming back from the LSP server\r\n  const handleMessage = (messageText: MessageEvent) => {\r\n    const message = JSON.parse(messageText.data);\r\n    const id = message.id;\r\n\r\n    // Only completion messages have an id\r\n    // In the future, if other types of messages use id, then we would have to keep a table of {id: typeOfMessage} to know how to handle each message based on their id\r\n    if (id) {\r\n      if (message.result?.items) {\r\n        setCompletionItems(message.result?.items);\r\n      } else {\r\n        setCompletionItems([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Every time the textField value changes, we need to tell the backend about it\r\n  const updateBackendMemory = (newValue: string) => {\r\n    latestDocumentVersion.current += 1;\r\n\r\n    if (ws.current.readyState === WebSocket.OPEN) {\r\n      ws.current.send(\r\n        JSON.stringify(\r\n          getDocumentChangedMessage(\r\n            newValue,\r\n            documentUri,\r\n            latestDocumentVersion.current\r\n          )\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Requests completion results\r\n  const getCompletionItems = () => {\r\n    latestMessageId.current += 1;\r\n\r\n    ws.current.send(\r\n      JSON.stringify(\r\n        getCompletionRequestMessage(latestMessageId.current, documentUri, {\r\n          line: 0,\r\n          character: cursorPosition,\r\n        })\r\n      )\r\n    );\r\n  };\r\n\r\n  return completionItems;\r\n};\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  CompletionParams,\r\n  DidChangeConfigurationParams,\r\n  DidChangeTextDocumentParams,\r\n  DidOpenTextDocumentParams,\r\n  InitializeParams,\r\n  Position,\r\n} from 'monaco-languageclient';\r\n\r\nexport const getInitializeMessage = (scopes: string[]) => {\r\n  const params: InitializeParams = {\r\n    clientInfo: {\r\n      name: 'IntellisenseTextField',\r\n    },\r\n    rootUri: null,\r\n    capabilities: {},\r\n    workspaceFolders: null,\r\n    processId: null,\r\n    initializationOptions: { scopes: scopes },\r\n  };\r\n  return {\r\n    jsonrpc: '2.0',\r\n    id: 0,\r\n    method: 'initialize',\r\n    params: params,\r\n  };\r\n};\r\n\r\nexport const getTextDocumentOpenedMessage = (\r\n  uri: string,\r\n  languageId: string,\r\n  version: number,\r\n  text: string\r\n) => {\r\n  const params: DidOpenTextDocumentParams = {\r\n    textDocument: {\r\n      uri,\r\n      languageId,\r\n      version,\r\n      text,\r\n    },\r\n  };\r\n  return {\r\n    jsonrpc: '2.0',\r\n    method: 'textDocument/didOpen',\r\n    params: params,\r\n  };\r\n};\r\n\r\nexport const getConfigurationChangedMessage = (scopes: string[]) => {\r\n  const params: DidChangeConfigurationParams = {\r\n    settings: {\r\n      scopes: scopes,\r\n    },\r\n  };\r\n  return {\r\n    jsonrpc: '2.0',\r\n    method: 'workspace/didChangeConfiguration',\r\n    params: params,\r\n  };\r\n};\r\n\r\nexport const getDocumentChangedMessage = (\r\n  text: string,\r\n  uri: string,\r\n  version: number\r\n) => {\r\n  const params: DidChangeTextDocumentParams = {\r\n    contentChanges: [{ text }],\r\n    textDocument: {\r\n      uri,\r\n      version,\r\n    },\r\n  };\r\n  return {\r\n    jsonrpc: '2.0',\r\n    method: 'textDocument/didChange',\r\n    params: params,\r\n  };\r\n};\r\n\r\nexport const getCompletionRequestMessage = (\r\n  id: number,\r\n  uri: string,\r\n  position: Position\r\n) => {\r\n  const params: CompletionParams = {\r\n    position,\r\n    textDocument: {\r\n      uri,\r\n    },\r\n  };\r\n  return {\r\n    id,\r\n    jsonrpc: '2.0',\r\n    method: 'textDocument/completion',\r\n    params: params,\r\n  };\r\n};\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport Editor, { monaco } from '@monaco-editor/react';\nimport { MonacoServices } from 'monaco-languageclient';\nimport {\n  createLanguageClient,\n  registerLanguage,\n} from 'monaco/utils/monacoUtils';\nimport { createWebSocket } from 'monaco/utils/socketsUtils';\nimport React from 'react';\nimport { listen, MessageConnection } from 'vscode-ws-jsonrpc';\n\ndeclare global {\n  interface Window {\n    monacoServiceInstance: MonacoServices;\n  }\n}\n\nconst LANGUAGE_NAME = 'intellisense';\n\nconst options = {\n  quickSuggestions: true,\n  wordBasedSuggestions: true,\n};\n\nfunction MonacoEditor(props) {\n  const { url, value, onChange } = props;\n  const [editor, setEditor] = React.useState<any>();\n\n  React.useEffect(() => {\n    if (!editor) return;\n\n    if (!window.monacoServiceInstance) {\n      window.monacoServiceInstance = MonacoServices.install(editor as any);\n    }\n\n    const webSocket: WebSocket = createWebSocket(url);\n\n    listen({\n      webSocket,\n      onConnection: (connection: MessageConnection) => {\n        const languageClient = createLanguageClient(\n          'Intellisense Language Client',\n          [LANGUAGE_NAME],\n          connection\n        );\n        const disposable = languageClient.start();\n        connection.onClose(() => disposable.dispose());\n      },\n    });\n  }, [editor]);\n\n  React.useEffect(() => {\n    if (editor) {\n      const disposable = editor.onDidChangeModelContent(() => {\n        onChange(editor.getValue());\n      });\n\n      return () => {\n        disposable.dispose();\n      };\n    }\n  }, [onChange, editor]);\n\n  React.useEffect(() => {\n    monaco.init().then((instance) => {\n      registerLanguage(instance, LANGUAGE_NAME);\n    });\n  }, []);\n\n  const editorDidMount = (_getValue, editor) => {\n    setEditor(editor);\n  };\n\n  return (\n    <>\n      <Editor\n        height=\"100px\"\n        width=\"300px\"\n        language={LANGUAGE_NAME}\n        theme=\"vs-dark\"\n        value={value}\n        editorDidMount={editorDidMount}\n        options={options}\n      />\n    </>\n  );\n}\n\nexport default MonacoEditor;\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport ReconnectingWebSocket from 'reconnecting-websocket';\r\n\r\nexport function createWebSocket(url: string): any {\r\n  const socketOptions = {\r\n    constructor: WebSocket,\r\n    maxReconnectionDelay: 10000,\r\n    minReconnectionDelay: 1000,\r\n    reconnectionDelayGrowFactor: 1.3,\r\n    connectionTimeout: 10000,\r\n    maxRetries: 500,\r\n    debug: false,\r\n  };\r\n\r\n  return new ReconnectingWebSocket(url, [], socketOptions);\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { Monaco } from '@monaco-editor/react';\r\nimport {\r\n  CloseAction,\r\n  createConnection,\r\n  ErrorAction,\r\n  LanguageClientOptions,\r\n  MonacoLanguageClient,\r\n} from 'monaco-languageclient';\r\nimport { MessageConnection } from 'vscode-ws-jsonrpc';\r\n\r\nexport function registerLanguage(monaco: Monaco, languageName: string) {\r\n  // return if we've already registered this language to the editor\r\n  if (monaco.languages.getLanguages().some((lang) => lang.id === languageName))\r\n    return;\r\n\r\n  monaco.languages.register({\r\n    id: languageName,\r\n  });\r\n}\r\n\r\nexport function createLanguageClient(\r\n  name: string,\r\n  documentSelector: LanguageClientOptions['documentSelector'],\r\n  connection: MessageConnection\r\n): MonacoLanguageClient {\r\n  return new MonacoLanguageClient({\r\n    name,\r\n    clientOptions: {\r\n      // use a language id as a document selector\r\n      documentSelector,\r\n      // disable the default error handler\r\n      errorHandler: {\r\n        error: () => ErrorAction.Continue,\r\n        closed: () => CloseAction.DoNotRestart,\r\n      },\r\n    },\r\n    // create a language client connection from the JSON RPC connection on demand\r\n    connectionProvider: {\r\n      get: (errorHandler, closeHandler) => {\r\n        return Promise.resolve(\r\n          createConnection(connection, errorHandler, closeHandler)\r\n        );\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nexport async function sendRequestWithRetry(\r\n  languageClient: MonacoLanguageClient,\r\n  method: string,\r\n  data: any,\r\n  interval = 1000\r\n) {\r\n  let sendTimer;\r\n\r\n  const send = (data) => {\r\n    try {\r\n      languageClient.sendRequest(method, data);\r\n      if (sendTimer) clearInterval(sendTimer);\r\n    } catch (error) {\r\n      sendTimer = setTimeout(() => {\r\n        send(data);\r\n      }, interval);\r\n    }\r\n  };\r\n  if (languageClient) {\r\n    await languageClient.onReady();\r\n    send(data);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { useConstCallback } from '@uifabric/react-hooks';\nimport VariablesList from 'demo/components/VariablesList';\nimport IntellisenseTextField from 'intellisense/components/IntellisenseTextField';\nimport MonacoEditor from 'monaco/components/MonacoEditor';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport * as React from 'react';\n\ninitializeIcons();\n\nconst fieldTypes = [\n  { key: 'textField', text: 'TextField' },\n  { key: 'monacoEditor', text: 'Monaco Editor' },\n];\n\nconst scopes = ['variables', 'expressions', 'scopes'];\n\nconst TEXTFIELD_ID = 'inmemory://intellisens/1';\n\nconst protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\nconst wsPort = 1337;\nconst url = `${protocol}://${window.location.hostname}:${wsPort}/intellisense-language-server`;\n\nfunction App() {\n  const [fieldType, setFieldType] = React.useState(fieldTypes[0]);\n  const [selectedScopes, setSelectedScopes] = React.useState(scopes);\n  const [textFieldValue, setTextFieldValue] = React.useState('');\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const openPanel = useConstCallback(() => setIsOpen(true));\n  const dismissPanel = useConstCallback(() => setIsOpen(false));\n\n  const onChangeFieldType = (_e, option) => {\n    setFieldType(option);\n  };\n\n  const onChangeSelectedScopes = (scope, isSelected) => {\n    let newScopes = [...selectedScopes];\n\n    if (isSelected) {\n      newScopes.push(scope);\n    } else {\n      newScopes = newScopes.filter((s) => s !== scope);\n    }\n\n    setSelectedScopes(newScopes);\n  };\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#f8f8f8',\n      }}\n    >\n      <Text variant=\"xxLarge\" nowrap block style={{ margin: '20px' }}>\n        React Intellisense\n      </Text>\n      <DefaultButton text=\"Settings\" onClick={openPanel} />\n      <div\n        style={{\n          boxShadow:\n            '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n          padding: '40px',\n          backgroundColor: 'white',\n          margin: '20px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        {fieldType.key === 'textField' ? (\n          <IntellisenseTextField\n            url={url}\n            scopes={selectedScopes}\n            id={TEXTFIELD_ID}\n            value={textFieldValue}\n            onChange={(newValue) => setTextFieldValue(newValue)}\n          />\n        ) : (\n          <MonacoEditor\n            url={url}\n            value={textFieldValue}\n            onChange={(newValue) => setTextFieldValue(newValue)}\n          />\n        )}\n      </div>\n\n      <Panel\n        isLightDismiss\n        isOpen={isOpen}\n        onDismiss={dismissPanel}\n        closeButtonAriaLabel=\"Close\"\n        headerText=\"\"\n      >\n        <Dropdown\n          label=\"Field type:\"\n          selectedKey={fieldType.key}\n          onChange={onChangeFieldType}\n          placeholder=\"Select an option\"\n          options={fieldTypes}\n          style={{ width: 300, marginBottom: '20px' }}\n        />\n\n        {fieldType.key === 'textField' ? (\n          <>\n            <Label>Completion kinds:</Label>\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n              {scopes.map((scope) => {\n                return (\n                  <div style={{ margin: '10px' }} key={scope}>\n                    <Checkbox\n                      label={scope}\n                      checked={selectedScopes.includes(scope)}\n                      onChange={(_e, checked) =>\n                        onChangeSelectedScopes(scope, checked)\n                      }\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        ) : (\n          <></>\n        )}\n\n        <VariablesList />\n      </Panel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import App from 'demo/components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}